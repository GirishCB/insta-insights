# Default values for prometheus-postgres-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: quay.io/prometheuscommunity/postgres-exporter
  tag: v0.10.1
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

service:
  type: ClusterIP
  port: 80
  targetPort: 9187
  name: http
  labels: {}
  annotations: {}

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to cloudwatch-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer from the Kubernetes Service onto the target
  # targetLabels: []
  # MetricRelabelConfigs to apply to samples before ingestion
  # metricRelabelings: []
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []

prometheusRule:
  enabled: false
  additionalLabels: {}
  namespace: ""
  rules: []
    ## These are just examples rules, please adapt them to your needs.
    ## Make sure to constraint the rules to the current prometheus-postgres-exporter service.
    # - alert: HugeReplicationLag
    #   expr: pg_replication_lag{service="{{ template "prometheus-postgres-exporter.fullname" . }}"} / 3600 > 1
    #   for: 1m
    #   labels:
    #     severity: critical
    #   annotations:
    #     description: replication for {{ template "prometheus-postgres-exporter.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
    #     summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #    memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Specifies whether a PodSecurityPolicy should be created
  pspEnabled: true
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # Add annotations to the ServiceAccount, useful for EKS IAM Roles for Service Accounts or Google Workload Identity.
  annotations: {}

# Add a default ingress to allow namespace access to service.targetPort
# Helpful if other NetworkPolicies are configured in the namespace
networkPolicy:
  # Specifies whether a NetworkPolicy should be created
  enabled: false
  # Set labels for the NetworkPolicy
  labels: {}

securityContext: {}
  # The securityContext this Pod should use. See https://kubernetes.io/docs/concepts/policy/security-context/ for more.
  # runAsUser: 65534

hostAliases: []
  # Set Host Aliases as per https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"

config:
  datasource:
    # Specify one of both datasource or datasourceSecret
    host: host.minikube.internal
    user: postgres
    # Only one of password, passwordFile, passwordSecret and pgpassfile can be specified
    password:
    # Specify passwordFile if DB password is stored in a file.
    # For example, to use with vault-injector from Hashicorp
    passwordFile: ''
    # Specify passwordSecret if DB password is stored in secret.
    passwordSecret: {}
    # Secret name
    #  name:
    # Password key inside secret
    #  key:
    pgpassfile: ''
    # If pgpassfile is set, it is used to initialize the PGPASSFILE environment variable.
    # See https://www.postgresql.org/docs/14/libpq-pgpass.html for more info.
    port: "5432"
    database: ''
    sslmode: disable
    extraParams: ''
  datasourceSecret: {}
    # Specifies if datasource should be sourced from secret value in format: postgresql://login:password@hostname:port/dbname?sslmode=disable
    # Multiple Postgres databases can be configured by comma separated postgres connection strings
    # Secret name
    #  name:
    # Connection string key inside secret
    #  key:
  disableDefaultMetrics: false
  disableSettingsMetrics: false
  autoDiscoverDatabases: false
  excludeDatabases: []
  includeDatabases: []
  constantLabels: {}
  # possible values debug, info, warn, error, fatal
  logLevel: ""
  # possible values logfmt, json
  logFormat: ""
  # Enable queries from an external configmap, enable it will disable inline queries below
  externalQueries:
    enabled: false
    configmap: postgresql-common-exporter-queries
  # These are the default queries that the exporter will run, extracted from: https://github.com/prometheus-community/postgres_exporter/blob/master/queries.yaml
  queries: |-
    pg_total_users:
      query: "select count(*) as count from cen.u_user"
      master: true
      metrics:
        - count:
            usage: "GAUGE"
            descripton: "Number of users"

    pg_total_users:
      query: "select count(*) as count from cen.u_user"
      master: true
      metrics:
        - count:
            usage: "GAUGE"
            descripton: "Number of users"

    top_ordered_tests:
      query: >
        select d.test_name ,count(tp.test_id) as count from cen.tests_prescribed tp JOIN cen.diagnostics d ON
        d.test_id = tp.test_id group by tp.test_id, d.test_name ORDER BY count(tp.test_id) DESC LIMIT 10;
      master: true
      cache_seconds: 30
      metrics:
        - test_name:
            usage: "LABEL"
            description: "Name of the test"
        - count:
            usage: "GAUGE"
            description: "Number of tests prescribed"

    no_show_rate_last_30_days:
      query: >
        SELECT count(*) as count FROM cen.scheduler_appointments where DATE(appointment_time) > now() - interval 
        '30 day' AND DATE(appointment_time) < now();
      master: true
      cache_seconds: 30
      metrics:
        - count:
            usage: "GAUGE"
            description: "Number of no shows after appointment booking"

    highest_revenue_by_sponsor:
      query: >
        select tpa_name, sum(insurance_claim_amt) as total_sum from cen.bill_charge_claim bcc join cen.tpa_master tm on 
        bcc.sponsor_id = tm.tpa_id group by tm.tpa_name order by total_sum desc limit 10;
      master: true
      cache_seconds: 30
      metrics:
        - tpa_name:
            usage: "LABEL"
            description: "Tpa name"
        - total_sum:
            usage: "GAUGE"
            descripion: "Total Sum Insured by the TPA"

    patient_visit_trend_by_state:
      query: >
        select sm.state_name, count(*) from cen.patient_details pd join cen.state_master sm on pd.patient_state=sm.state_id 
        group by sm.state_name order by count(*) desc;
      master: true
      cache_seconds: 30
      metrics:
        - state_name:
            usage: "LABEL"
            description: "state name"
        - count:
            usage: "GAUGE"
            description: "Number of patients"

    patient_footfall_trend_op_ip:
      query: >
        select visit_type, count(*) from cen.patient_registration group by visit_type;
      master: true
      cache_seconds: 30
      metrics:
        - visit_type:
            usage: "LABEL"
            description: "patient visit type"
        - count:
            usage: "GAUGE"
            description: "visits"

    patient_footfall_trend_op_ip_today:
      query: >
        select visit_type, count(*) from cen.patient_registration where reg_date = CURRENT_DATE group by visit_type;
      master: true
      cache_seconds: 30
      metrics:
        - visit_type:
            usage: "LABEL"
            description: "patient visit type"
        - count:
            usage: "GAUGE"
            description: "visits"

    patient_footfall_trend_by_dept_name:
      query: >
        select dp.dept_name , count(*) from cen.patient_registration pr join cen.department dp 
        on pr.dept_name = dp.dept_id group by dp.dept_name; 
      master: true
      metrics:
        - dept_name:
            usage: "LABEL"
            description: "patient dept type"
        - count:
            usage: "GAUGE"
            description: "visits"

nodeSelector: {}

tolerations: []

affinity: {}

annotations: {}

podLabels: {}

# Configurable health checks
livenessProbe:
  initialDelaySeconds: 0
  timeoutSeconds: 1

readinessProbe:
  initialDelaySeconds: 0
  timeoutSeconds: 1


# Init containers, e. g. for secrets creation before the exporter
initContainers: []
  # - name:
  #   image:
  #   volumeMounts:
  #     - name: creds
  #       mountPath: /creds

# Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
extraContainers: []

# Additional volumes, e. g. for secrets used in an extraContainer
extraVolumes: []

# Uncomment for mounting custom ca-certificates
#  - name: ssl-certs
#    secret:
#      defaultMode: 420
#      items:
#      - key: ca-certificates.crt
#        path: ca-certificates.crt
#      secretName: ssl-certs

# Additional volume mounts
extraVolumeMounts: []

# Uncomment for mounting custom ca-certificates file into container
#  - name: ssl-certs
#    mountPath: /etc/ssl/certs/ca-certificates.crt
#    subPath: ca-certificates.crt

podDisruptionBudget:
  enabled: false
  maxUnavailable: 1
